// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFAdaptationsType;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFAdaptationsTypeSerializerVer13 {

    public final static byte OTS_OMS_VAL = (byte) 0x1;
    public final static byte OMS_OCH_VAL = (byte) 0x2;
    public final static byte OPS_OCHR_VAL = (byte) 0x3;
    public final static byte OPSM_OTUK_VAL = (byte) 0x4;
    public final static byte OCH_OTUK_VAL = (byte) 0x5;
    public final static byte ODUK_ODUIJ_VAL = (byte) 0x6;
    public final static byte ODUK_ODUJ21_VAL = (byte) 0x7;
    public final static byte ODUKH_ODUJ21_VAL = (byte) 0x8;
    public final static byte ODU0_CBRX_VAL = (byte) 0x9;
    public final static byte ODUK_CBRX_VAL = (byte) 0xa;
    public final static byte ODUK_CBRXG_VAL = (byte) 0xb;
    public final static byte ODUK_RSN_VAL = (byte) 0xc;
    public final static byte ODUK_ATM_VAL = (byte) 0xd;
    public final static byte ODUK_ETH_VAL = (byte) 0xe;
    public final static byte ODUKH_ETH_VAL = (byte) 0xf;
    public final static byte ODUK_ETHPPOS_VAL = (byte) 0x10;

    public static OFAdaptationsType readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readByte());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFAdaptationsType e) {
        bb.writeByte(toWireValue(e));
    }

    public static void putTo(OFAdaptationsType e, PrimitiveSink sink) {
        sink.putByte(toWireValue(e));
    }

    public static OFAdaptationsType ofWireValue(byte val) {
        switch(val) {
            case OTS_OMS_VAL:
                return OFAdaptationsType.OTS_OMS;
            case OMS_OCH_VAL:
                return OFAdaptationsType.OMS_OCH;
            case OPS_OCHR_VAL:
                return OFAdaptationsType.OPS_OCHR;
            case OPSM_OTUK_VAL:
                return OFAdaptationsType.OPSM_OTUK;
            case OCH_OTUK_VAL:
                return OFAdaptationsType.OCH_OTUK;
            case ODUK_ODUIJ_VAL:
                return OFAdaptationsType.ODUK_ODUIJ;
            case ODUK_ODUJ21_VAL:
                return OFAdaptationsType.ODUK_ODUJ21;
            case ODUKH_ODUJ21_VAL:
                return OFAdaptationsType.ODUKH_ODUJ21;
            case ODU0_CBRX_VAL:
                return OFAdaptationsType.ODU0_CBRX;
            case ODUK_CBRX_VAL:
                return OFAdaptationsType.ODUK_CBRX;
            case ODUK_CBRXG_VAL:
                return OFAdaptationsType.ODUK_CBRXG;
            case ODUK_RSN_VAL:
                return OFAdaptationsType.ODUK_RSN;
            case ODUK_ATM_VAL:
                return OFAdaptationsType.ODUK_ATM;
            case ODUK_ETH_VAL:
                return OFAdaptationsType.ODUK_ETH;
            case ODUKH_ETH_VAL:
                return OFAdaptationsType.ODUKH_ETH;
            case ODUK_ETHPPOS_VAL:
                return OFAdaptationsType.ODUK_ETHPPOS;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFAdaptationsType in version 1.3: " + val);
        }
    }


    public static byte toWireValue(OFAdaptationsType e) {
        switch(e) {
            case OTS_OMS:
                return OTS_OMS_VAL;
            case OMS_OCH:
                return OMS_OCH_VAL;
            case OPS_OCHR:
                return OPS_OCHR_VAL;
            case OPSM_OTUK:
                return OPSM_OTUK_VAL;
            case OCH_OTUK:
                return OCH_OTUK_VAL;
            case ODUK_ODUIJ:
                return ODUK_ODUIJ_VAL;
            case ODUK_ODUJ21:
                return ODUK_ODUJ21_VAL;
            case ODUKH_ODUJ21:
                return ODUKH_ODUJ21_VAL;
            case ODU0_CBRX:
                return ODU0_CBRX_VAL;
            case ODUK_CBRX:
                return ODUK_CBRX_VAL;
            case ODUK_CBRXG:
                return ODUK_CBRXG_VAL;
            case ODUK_RSN:
                return ODUK_RSN_VAL;
            case ODUK_ATM:
                return ODUK_ATM_VAL;
            case ODUK_ETH:
                return ODUK_ETH_VAL;
            case ODUKH_ETH:
                return ODUKH_ETH_VAL;
            case ODUK_ETHPPOS:
                return ODUK_ETHPPOS_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFAdaptationsType in version 1.3: " + e);
        }
    }

}
