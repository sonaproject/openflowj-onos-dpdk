// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFOtportSignalType;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFOtportSignalTypeSerializerVer13 {

    public final static short OTSN_VAL = (short) 0x1;
    public final static short OMSN_VAL = (short) 0x2;
    public final static short OPSN_VAL = (short) 0x3;
    public final static short OPSM_VAL = (short) 0x4;
    public final static short OCH_VAL = (short) 0x5;
    public final static short OTU1_VAL = (short) 0xb;
    public final static short OTU2_VAL = (short) 0xc;
    public final static short OTU3_VAL = (short) 0xd;
    public final static short OTU4_VAL = (short) 0xe;

    public static OFOtportSignalType readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(U8.f(bb.readByte()));
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFOtportSignalType e) {
        bb.writeByte(U8.t(toWireValue(e)));
    }

    public static void putTo(OFOtportSignalType e, PrimitiveSink sink) {
        sink.putShort(toWireValue(e));
    }

    public static OFOtportSignalType ofWireValue(short val) {
        switch(val) {
            case OTSN_VAL:
                return OFOtportSignalType.OTSN;
            case OMSN_VAL:
                return OFOtportSignalType.OMSN;
            case OPSN_VAL:
                return OFOtportSignalType.OPSN;
            case OPSM_VAL:
                return OFOtportSignalType.OPSM;
            case OCH_VAL:
                return OFOtportSignalType.OCH;
            case OTU1_VAL:
                return OFOtportSignalType.OTU1;
            case OTU2_VAL:
                return OFOtportSignalType.OTU2;
            case OTU3_VAL:
                return OFOtportSignalType.OTU3;
            case OTU4_VAL:
                return OFOtportSignalType.OTU4;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFOtportSignalType in version 1.3: " + val);
        }
    }


    public static short toWireValue(OFOtportSignalType e) {
        switch(e) {
            case OTSN:
                return OTSN_VAL;
            case OMSN:
                return OMSN_VAL;
            case OPSN:
                return OPSN_VAL;
            case OPSM:
                return OPSM_VAL;
            case OCH:
                return OCH_VAL;
            case OTU1:
                return OTU1_VAL;
            case OTU2:
                return OTU2_VAL;
            case OTU3:
                return OTU3_VAL;
            case OTU4:
                return OTU4_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFOtportSignalType in version 1.3: " + e);
        }
    }

}
