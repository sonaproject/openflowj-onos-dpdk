// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFOducltSignalType;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFOducltSignalTypeSerializerVer13 {

    public final static byte STM16_VAL = (byte) 0x1;
    public final static byte STM64_VAL = (byte) 0x2;
    public final static byte STM256_VAL = (byte) 0x3;
    public final static byte STM1_VAL = (byte) 0x4;
    public final static byte STM4_VAL = (byte) 0x5;
    public final static byte GBE1_VAL = (byte) 0x6;
    public final static byte GBE10_VAL = (byte) 0x7;
    public final static byte GBE40_VAL = (byte) 0x8;
    public final static byte GBE100_VAL = (byte) 0x9;
    public final static byte FC100_VAL = (byte) 0xa;
    public final static byte FC200_VAL = (byte) 0xb;
    public final static byte FC400_VAL = (byte) 0xc;
    public final static byte FC800_VAL = (byte) 0xd;
    public final static byte FC1200_VAL = (byte) 0xe;
    public final static byte GPON_VAL = (byte) 0xf;
    public final static byte XGPON_VAL = (byte) 0x10;
    public final static byte IB_SDR_VAL = (byte) 0x11;
    public final static byte IB_DDR_VAL = (byte) 0x12;
    public final static byte IB_QDR_VAL = (byte) 0x13;
    public final static byte SBCON_ESCON_VAL = (byte) 0x14;
    public final static byte DVBASI_VAL = (byte) 0x15;
    public final static byte SDI_VAL = (byte) 0x16;
    public final static byte SDI1G5_VAL = (byte) 0x17;
    public final static byte SDI3G_VAL = (byte) 0x18;
    public final static byte ATM_VAL = (byte) 0x19;
    public final static byte ETH_VAL = (byte) 0x1a;
    public final static byte MPLS_VAL = (byte) 0x1b;
    public final static byte IP_VAL = (byte) 0x1c;

    public static OFOducltSignalType readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readByte());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFOducltSignalType e) {
        bb.writeByte(toWireValue(e));
    }

    public static void putTo(OFOducltSignalType e, PrimitiveSink sink) {
        sink.putByte(toWireValue(e));
    }

    public static OFOducltSignalType ofWireValue(byte val) {
        switch(val) {
            case STM16_VAL:
                return OFOducltSignalType.STM16;
            case STM64_VAL:
                return OFOducltSignalType.STM64;
            case STM256_VAL:
                return OFOducltSignalType.STM256;
            case STM1_VAL:
                return OFOducltSignalType.STM1;
            case STM4_VAL:
                return OFOducltSignalType.STM4;
            case GBE1_VAL:
                return OFOducltSignalType.GBE1;
            case GBE10_VAL:
                return OFOducltSignalType.GBE10;
            case GBE40_VAL:
                return OFOducltSignalType.GBE40;
            case GBE100_VAL:
                return OFOducltSignalType.GBE100;
            case FC100_VAL:
                return OFOducltSignalType.FC100;
            case FC200_VAL:
                return OFOducltSignalType.FC200;
            case FC400_VAL:
                return OFOducltSignalType.FC400;
            case FC800_VAL:
                return OFOducltSignalType.FC800;
            case FC1200_VAL:
                return OFOducltSignalType.FC1200;
            case GPON_VAL:
                return OFOducltSignalType.GPON;
            case XGPON_VAL:
                return OFOducltSignalType.XGPON;
            case IB_SDR_VAL:
                return OFOducltSignalType.IB_SDR;
            case IB_DDR_VAL:
                return OFOducltSignalType.IB_DDR;
            case IB_QDR_VAL:
                return OFOducltSignalType.IB_QDR;
            case SBCON_ESCON_VAL:
                return OFOducltSignalType.SBCON_ESCON;
            case DVBASI_VAL:
                return OFOducltSignalType.DVBASI;
            case SDI_VAL:
                return OFOducltSignalType.SDI;
            case SDI1G5_VAL:
                return OFOducltSignalType.SDI1G5;
            case SDI3G_VAL:
                return OFOducltSignalType.SDI3G;
            case ATM_VAL:
                return OFOducltSignalType.ATM;
            case ETH_VAL:
                return OFOducltSignalType.ETH;
            case MPLS_VAL:
                return OFOducltSignalType.MPLS;
            case IP_VAL:
                return OFOducltSignalType.IP;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFOducltSignalType in version 1.3: " + val);
        }
    }


    public static byte toWireValue(OFOducltSignalType e) {
        switch(e) {
            case STM16:
                return STM16_VAL;
            case STM64:
                return STM64_VAL;
            case STM256:
                return STM256_VAL;
            case STM1:
                return STM1_VAL;
            case STM4:
                return STM4_VAL;
            case GBE1:
                return GBE1_VAL;
            case GBE10:
                return GBE10_VAL;
            case GBE40:
                return GBE40_VAL;
            case GBE100:
                return GBE100_VAL;
            case FC100:
                return FC100_VAL;
            case FC200:
                return FC200_VAL;
            case FC400:
                return FC400_VAL;
            case FC800:
                return FC800_VAL;
            case FC1200:
                return FC1200_VAL;
            case GPON:
                return GPON_VAL;
            case XGPON:
                return XGPON_VAL;
            case IB_SDR:
                return IB_SDR_VAL;
            case IB_DDR:
                return IB_DDR_VAL;
            case IB_QDR:
                return IB_QDR_VAL;
            case SBCON_ESCON:
                return SBCON_ESCON_VAL;
            case DVBASI:
                return DVBASI_VAL;
            case SDI:
                return SDI_VAL;
            case SDI1G5:
                return SDI1G5_VAL;
            case SDI3G:
                return SDI3G_VAL;
            case ATM:
                return ATM_VAL;
            case ETH:
                return ETH_VAL;
            case MPLS:
                return MPLS_VAL;
            case IP:
                return IP_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFOducltSignalType in version 1.3: " + e);
        }
    }

}
