// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFGridType;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFGridTypeSerializerVer13 {

    public final static short RES_VAL = (short) 0x0;
    public final static short DWDM_VAL = (short) 0x1;
    public final static short CWDM_VAL = (short) 0x2;
    public final static short FLEX_VAL = (short) 0x3;

    public static OFGridType readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(U8.f(bb.readByte()));
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFGridType e) {
        bb.writeByte(U8.t(toWireValue(e)));
    }

    public static void putTo(OFGridType e, PrimitiveSink sink) {
        sink.putShort(toWireValue(e));
    }

    public static OFGridType ofWireValue(short val) {
        switch(val) {
            case RES_VAL:
                return OFGridType.RES;
            case DWDM_VAL:
                return OFGridType.DWDM;
            case CWDM_VAL:
                return OFGridType.CWDM;
            case FLEX_VAL:
                return OFGridType.FLEX;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFGridType in version 1.3: " + val);
        }
    }


    public static short toWireValue(OFGridType e) {
        switch(e) {
            case RES:
                return RES_VAL;
            case DWDM:
                return DWDM_VAL;
            case CWDM:
                return CWDM_VAL;
            case FLEX:
                return FLEX_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFGridType in version 1.3: " + e);
        }
    }

}
