// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFChannelSpacing;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFChannelSpacingSerializerVer13 {

    public final static short RES_VAL = (short) 0x0;
    public final static short GHZ_100_VAL = (short) 0x1;
    public final static short GHZ_50_VAL = (short) 0x2;
    public final static short GHZ_24_VAL = (short) 0x3;
    public final static short GHZ_12P5_VAL = (short) 0x4;
    public final static short GHZ_6P25_VAL = (short) 0x5;

    public static OFChannelSpacing readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(U8.f(bb.readByte()));
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFChannelSpacing e) {
        bb.writeByte(U8.t(toWireValue(e)));
    }

    public static void putTo(OFChannelSpacing e, PrimitiveSink sink) {
        sink.putShort(toWireValue(e));
    }

    public static OFChannelSpacing ofWireValue(short val) {
        switch(val) {
            case RES_VAL:
                return OFChannelSpacing.RES;
            case GHZ_100_VAL:
                return OFChannelSpacing.GHZ_100;
            case GHZ_50_VAL:
                return OFChannelSpacing.GHZ_50;
            case GHZ_24_VAL:
                return OFChannelSpacing.GHZ_24;
            case GHZ_12P5_VAL:
                return OFChannelSpacing.GHZ_12P5;
            case GHZ_6P25_VAL:
                return OFChannelSpacing.GHZ_6P25;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFChannelSpacing in version 1.3: " + val);
        }
    }


    public static short toWireValue(OFChannelSpacing e) {
        switch(e) {
            case RES:
                return RES_VAL;
            case GHZ_100:
                return GHZ_100_VAL;
            case GHZ_50:
                return GHZ_50_VAL;
            case GHZ_24:
                return GHZ_24_VAL;
            case GHZ_12P5:
                return GHZ_12P5_VAL;
            case GHZ_6P25:
                return GHZ_6P25_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFChannelSpacing in version 1.3: " + e);
        }
    }

}
