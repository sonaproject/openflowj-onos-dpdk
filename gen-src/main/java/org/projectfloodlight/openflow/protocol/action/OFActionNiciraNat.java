// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_interface.java
// Do not modify

package org.projectfloodlight.openflow.protocol.action;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import java.util.List;
import io.netty.buffer.ByteBuf;

public interface OFActionNiciraNat extends OFObject, OFActionNicira {
    OFActionType getType();
    long getExperimenter();
    int getSubtype();
    int getFlags();
    int getRangePresent();
    List<IPv4Address> getIpv4Range();
    List<IPv6Address> getIpv6Range();
    List<U16> getPortRange();
    List<U8> getPad();
    OFVersion getVersion();

    void writeTo(ByteBuf channelBuffer);

    Builder createBuilder();
    public interface Builder extends OFActionNicira.Builder {
        OFActionNiciraNat build();
        OFActionType getType();
        long getExperimenter();
        int getSubtype();
        int getFlags();
        Builder setFlags(int flags);
        int getRangePresent();
        Builder setRangePresent(int rangePresent);
        List<IPv4Address> getIpv4Range();
        Builder setIpv4Range(List<IPv4Address> ipv4Range);
        List<IPv6Address> getIpv6Range();
        Builder setIpv6Range(List<IPv6Address> ipv6Range);
        List<U16> getPortRange();
        Builder setPortRange(List<U16> portRange);
        List<U8> getPad();
        Builder setPad(List<U8> pad);
        OFVersion getVersion();
    }
}
