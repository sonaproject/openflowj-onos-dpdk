// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template unit_test.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import java.util.Set;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import com.google.common.collect.ImmutableList;
import java.util.EnumSet;
import com.google.common.collect.Sets;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.hamcrest.CoreMatchers;



public class OFExpPortDescReplyVer13Test {
    OFFactory factory;

    final static byte[] EXP_PORT_DESC_REPLY_SERIALIZED =
        new byte[] { 0x4, 0x13, 0x0, 0x58, 0x12, 0x34, 0x56, 0x78, (byte) 0xff, (byte) 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, (byte) 0xff, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x4, 0x0, 0x2, 0x0, 0x18, 0xc, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x3, 0x1, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0 };

    @Before
    public void setup() {
        factory = OFFactoryVer13.INSTANCE;
    }

    @Test
    public void testWrite() {
        OFExpPortDescReply.Builder builder = factory.buildExpPortDescReply();
        builder
        .setXid(0x12345678)
        .setFlags(ImmutableSet.<OFStatsReplyFlags>of())
        .setEntries(ImmutableList.of(
                factory.buildExpPort()
                   .setPortNo(OFPort.of(1))
                   .setHwAddr(MacAddress.of("00:00:00:00:00:00"))
                   .setName("interface1234567")
                   .setConfig(Sets.immutableEnumSet(OFPortConfig.NO_FWD, OFPortConfig.NO_PACKET_IN))
                   .setState(Sets.immutableEnumSet(OFPortState.LIVE))
                   .setProperties(ImmutableList.of(
				  factory.buildExpPortDescPropOpticalTransport()
                                  .setPortSignalType(OFPortOpticalTransportSignalType.OTU2)
   				  .setFeatures(ImmutableList.of(
                                               factory.buildExpPortOpticalTransportLayerStack()
                                              .setValue(ImmutableList.of(
						         factory.buildExpPortOpticalTransportLayerEntry()
                                                        .setLayerClass(OFPortOpticalTransportLayerClass.ODU)
                                                        .setSignalType((short)1)
                                                        .setAdaptation(OFAdaptationsType.ODUK_ODUIJ)
                                                        .build()))
                                              .build()))
		                   .build()))
                     .build()))
          .build();;
        OFExpPortDescReply expPortDescReply = builder.build();
        ByteBuf bb = Unpooled.buffer();
        expPortDescReply.writeTo(bb);
        byte[] written = new byte[bb.readableBytes()];
        bb.readBytes(written);

        assertThat(written, CoreMatchers.equalTo(EXP_PORT_DESC_REPLY_SERIALIZED));
    }

    @Test
    public void testRead() throws Exception {
        OFExpPortDescReply.Builder builder = factory.buildExpPortDescReply();
        builder
        .setXid(0x12345678)
        .setFlags(ImmutableSet.<OFStatsReplyFlags>of())
        .setEntries(ImmutableList.of(
                factory.buildExpPort()
                   .setPortNo(OFPort.of(1))
                   .setHwAddr(MacAddress.of("00:00:00:00:00:00"))
                   .setName("interface1234567")
                   .setConfig(Sets.immutableEnumSet(OFPortConfig.NO_FWD, OFPortConfig.NO_PACKET_IN))
                   .setState(Sets.immutableEnumSet(OFPortState.LIVE))
                   .setProperties(ImmutableList.of(
				  factory.buildExpPortDescPropOpticalTransport()
                                  .setPortSignalType(OFPortOpticalTransportSignalType.OTU2)
   				  .setFeatures(ImmutableList.of(
                                               factory.buildExpPortOpticalTransportLayerStack()
                                              .setValue(ImmutableList.of(
						         factory.buildExpPortOpticalTransportLayerEntry()
                                                        .setLayerClass(OFPortOpticalTransportLayerClass.ODU)
                                                        .setSignalType((short)1)
                                                        .setAdaptation(OFAdaptationsType.ODUK_ODUIJ)
                                                        .build()))
                                              .build()))
		                   .build()))
                     .build()))
          .build();;
        OFExpPortDescReply expPortDescReplyBuilt = builder.build();

        ByteBuf input = Unpooled.copiedBuffer(EXP_PORT_DESC_REPLY_SERIALIZED);

        // FIXME should invoke the overall reader once implemented
        OFExpPortDescReply expPortDescReplyRead = OFExpPortDescReplyVer13.READER.readFrom(input);
        assertEquals(EXP_PORT_DESC_REPLY_SERIALIZED.length, input.readerIndex());

        assertEquals(expPortDescReplyBuilt, expPortDescReplyRead);
   }

   @Test
   public void testReadWrite() throws Exception {
       ByteBuf input = Unpooled.copiedBuffer(EXP_PORT_DESC_REPLY_SERIALIZED);

       // FIXME should invoke the overall reader once implemented
       OFExpPortDescReply expPortDescReply = OFExpPortDescReplyVer13.READER.readFrom(input);
       assertEquals(EXP_PORT_DESC_REPLY_SERIALIZED.length, input.readerIndex());

       // write message again
       ByteBuf bb = Unpooled.buffer();
       expPortDescReply.writeTo(bb);
       byte[] written = new byte[bb.readableBytes()];
       bb.readBytes(written);

       assertThat(written, CoreMatchers.equalTo(EXP_PORT_DESC_REPLY_SERIALIZED));
   }

}
